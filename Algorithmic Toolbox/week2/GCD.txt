input : integers a,b>=0
output : gcd(a,b)

put fraction a/b in simplets form 
Divide numerator and deneominator by d, to get (a/d)/(b/d)
# need d to divide a and b
# want d to be as  large as possible

                                        Naive Algorithm
                                      -----------------------
     Function NaiveGCD(a,b)
     best <-0
     for d from 1 to a+b:
     if d\a and d\b:
     best<-d
     return best
     
     
                                            efficient algo
                                          -----------------
                                          
            1. implement the euclidean algorithm
            2. Approximate the runtime
            
            Definition: For integers, a and b, their greatest common divisor or gcd(a,b) is the largest integer d so that d divides both a and b.
            
                                       key lemma
                                     --------------
                      Let a' be the remainder when a is divided by b, then 
                      gcd(a,b)=gcd(a',b)=gcd(b,a')
                      
                      
                      Euclidean algorithm
                    ----------------------
                    Function EuclideanGCD(a,b)
                    if b=0
                       return a
                    a' <- the remainder when a is 
                           divided by b
                       return EuclideanGCD(b,a')